#!/usr/bin/env python3
"""
Script de correction pour les transferts FTPS qui arrivent vides
R√©sout le probl√®me "TLS session of data connection not resumed"
"""

import os
import sys
import json
import ftplib
import ssl
import logging
import subprocess
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('FTPSFix')

class FixedFTPSTransfer:
    """Classe de transfert FTPS corrig√©e pour le probl√®me de session TLS"""
    
    def __init__(self, config):
        self.config = config
        self.ftp_config = config['ftp']
        self.connection = None
    
    def connect(self):
        """Connexion avec configuration FTPS sp√©ciale"""
        try:
            # Cr√©er un contexte SSL tr√®s permissif
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            # D√©sactiver la v√©rification de reprise de session TLS
            context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1
            
            self.connection = ftplib.FTP_TLS(context=context)
            
            # Se connecter au serveur
            self.connection.connect(
                self.ftp_config['server'],
                self.ftp_config.get('port', 21),
                timeout=30
            )
            
            # Authentification
            self.connection.login(
                self.ftp_config['username'],
                self.ftp_config['password']
            )
            
            # IMPORTANT: Ne PAS activer prot_p() pour √©viter le probl√®me TLS
            # self.connection.prot_p()  # <- Cette ligne cause le probl√®me
            
            # Utiliser le mode passif
            self.connection.set_pasv(True)
            
            # Changer vers le r√©pertoire cible
            self.connection.cwd(self.ftp_config['directory'])
            
            logger.info("‚úÖ Connexion FTPS r√©ussie (sans protection donn√©es TLS)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion FTPS: {e}")
            return False
    
    def upload_file(self, local_path, remote_filename=None):
        """Upload un fichier avec la m√©thode corrig√©e"""
        if not remote_filename:
            remote_filename = os.path.basename(local_path)
        
        if not os.path.exists(local_path):
            logger.error(f"Fichier local inexistant: {local_path}")
            return False
        
        file_size = os.path.getsize(local_path)
        logger.info(f"üì§ Upload de {remote_filename} ({file_size} octets)")
        
        try:
            with open(local_path, 'rb') as f:
                # Utiliser un buffer de taille r√©duite pour FTPS
                result = self.connection.storbinary(f'STOR {remote_filename}', f, blocksize=4096)
                
            if result.startswith('226'):  # 226 = Transfer complete
                logger.info(f"‚úÖ Upload r√©ussi: {remote_filename}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Upload avec avertissement: {result}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur upload {remote_filename}: {e}")
            return False
    
    def disconnect(self):
        """Fermer la connexion"""
        if self.connection:
            try:
                self.connection.quit()
            except:
                pass
            self.connection = None

class LFTPTransfer:
    """Alternative avec lftp et param√®tres optimis√©s"""
    
    def __init__(self, config):
        self.config = config
        self.ftp_config = config['ftp']
    
    def upload_file(self, local_path, remote_filename=None):
        """Upload avec lftp et options optimis√©es"""
        if not remote_filename:
            remote_filename = os.path.basename(local_path)
        
        if not os.path.exists(local_path):
            logger.error(f"Fichier local inexistant: {local_path}")
            return False
        
        file_size = os.path.getsize(local_path)
        logger.info(f"üì§ Upload lftp de {remote_filename} ({file_size} octets)")
        
        # Configuration lftp optimis√©e pour √©viter les probl√®mes FTPS
        commands = [
            'set ftp:ssl-force true',
            'set ftp:ssl-protect-data false',  # IMPORTANT: d√©sactiver la protection des donn√©es
            'set ssl:verify-certificate false',
            'set net:timeout 60',
            'set net:max-retries 3',
            'set net:reconnect-interval-base 5',
            f'open -u {self.ftp_config["username"]},{self.ftp_config["password"]} {self.ftp_config["server"]}',
            f'cd {self.ftp_config["directory"]}',
            f'put "{local_path}" -o "{remote_filename}"',
            'quit'
        ]
        
        lftp_script = '\n'.join(commands)
        
        try:
            result = subprocess.run(
                ['lftp'],
                input=lftp_script.encode(),
                capture_output=True,
                text=True,
                timeout=120
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Upload lftp r√©ussi: {remote_filename}")
                return True
            else:
                logger.error(f"‚ùå Erreur lftp: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lftp: {e}")
            return False

def load_config():
    """Charge la configuration"""
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Erreur chargement config: {e}")
        return None

def upload_photos_fixed():
    """Upload toutes les photos avec la m√©thode corrig√©e"""
    config = load_config()
    if not config:
        return False
    
    download_path = config['camera'].get('download_path', '/tmp/photos')
    
    # Trouver toutes les photos
    photo_files = []
    for ext in ['*.jpg', '*.jpeg', '*.JPG', '*.JPEG']:
        photo_files.extend(Path(download_path).glob(ext))
    
    if not photo_files:
        logger.info("Aucune photo √† transf√©rer")
        return True
    
    logger.info(f"Trouv√© {len(photo_files)} photos √† transf√©rer")
    
    # Essayer d'abord avec la m√©thode FTPS corrig√©e
    logger.info("üîß Tentative avec FTPS corrig√©...")
    ftps_transfer = FixedFTPSTransfer(config)
    
    if ftps_transfer.connect():
        success_count = 0
        for photo_path in photo_files:
            if ftps_transfer.upload_file(str(photo_path)):
                success_count += 1
                
                # Supprimer apr√®s upload si configur√©
                if config['camera'].get('delete_after_upload', False):
                    try:
                        photo_path.unlink()
                        logger.info(f"üóëÔ∏è Fichier local supprim√©: {photo_path.name}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Impossible de supprimer {photo_path.name}: {e}")
        
        ftps_transfer.disconnect()
        
        if success_count > 0:
            logger.info(f"‚úÖ FTPS corrig√©: {success_count}/{len(photo_files)} photos transf√©r√©es")
            return True
    
    # Si FTPS √©choue, essayer avec lftp
    logger.info("üîß Tentative avec lftp optimis√©...")
    lftp_transfer = LFTPTransfer(config)
    
    success_count = 0
    for photo_path in photo_files:
        if lftp_transfer.upload_file(str(photo_path)):
            success_count += 1
            
            # Supprimer apr√®s upload si configur√©
            if config['camera'].get('delete_after_upload', False):
                try:
                    photo_path.unlink()
                    logger.info(f"üóëÔ∏è Fichier local supprim√©: {photo_path.name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Impossible de supprimer {photo_path.name}: {e}")
    
    logger.info(f"‚úÖ lftp optimis√©: {success_count}/{len(photo_files)} photos transf√©r√©es")
    return success_count > 0

def main():
    """Fonction principale"""
    logger.info("üöÄ Transfert FTPS corrig√© pour fichiers non-vides")
    
    success = upload_photos_fixed()
    
    if success:
        logger.info("‚úÖ Transfert termin√© avec succ√®s!")
    else:
        logger.error("‚ùå √âchec du transfert")
        sys.exit(1)

if __name__ == "__main__":
    main()
